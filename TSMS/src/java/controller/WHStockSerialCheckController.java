package controller;

import dao.SerialNumberDAO;
import dao.StockMovementDetailDAO;
import java.io.IOException;
import java.util.List;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import model.StockMovementDetail;
import util.Validate;

@WebServlet(name = "WHStockSerialCheckController", urlPatterns = {"/serial-check", "/serial-check-export"})
public class WHStockSerialCheckController extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");

        String dbName = (String) request.getSession().getAttribute("dbName");

        if (dbName == null || dbName.isEmpty()) {
            response.sendRedirect("login");
            return;
        }

        String idParam = request.getParameter("id");
        if (idParam == null && request.getAttribute("id") != null) {
            idParam = request.getAttribute("id").toString();
        }

        String movementType = request.getParameter("movementType");
        if (movementType == null && request.getAttribute("movementType") != null) {
            movementType = request.getAttribute("movementType").toString();
        }

        if (idParam == null) {
            request.setAttribute("error", "Kh√¥ng t√¨m th·∫•y m√£ ƒë∆°n ki·ªÉm kho.");
            request.getRequestDispatcher("/WEB-INF/jsp/warehouse-manager/stock-check.jsp").forward(request, response);
            return;
        }

        int movementID = Integer.parseInt(idParam);

        StockMovementDetailDAO dao = new StockMovementDetailDAO();
        List<StockMovementDetail> details = dao.getDetailsByMovementID(dbName, movementID);
        for (StockMovementDetail detail : details) {
            System.out.println("‚úîÔ∏è DetailID: " + detail.getDetailID() + ", ProductDetailID: " + detail.getProductDetailID());

        }

        request.setAttribute("movementID", movementID);
        request.setAttribute("movementDetails", details);
        request.setAttribute("movementType", movementType);

        System.out.println("üì¶ ƒê∆°n " + (movementType != null ? movementType : "") + " #" + movementID + " c√≥ " + details.size() + " d√≤ng s·∫£n ph·∫©m.");

        //Ki·ªÉm tra t·∫•t c·∫£ c√°c s·∫£n ph·∫©m trong ƒë√£ ho√†n th√†nh ch∆∞a. 10 s·∫£n ph·∫©m 2/2 => ƒë√£ ho√†n th√†nh
        boolean allCompleted = true;
        for (StockMovementDetail item : details) {
            if (item.getScanned() < item.getQuantity()) {
                allCompleted = false;
                break;
            }
        }
        request.setAttribute("allCompleted", allCompleted);
        request.getRequestDispatcher("/WEB-INF/jsp/warehouse-manager/stock-check.jsp").forward(request, response);
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");

        String dbName = (String) request.getSession().getAttribute("dbName");
        String serial = request.getParameter("scannedSerial");
        String detailIDStr = request.getParameter("detailID");
        String movementIDStr = request.getParameter("movementID");
        String movementType = request.getParameter("movementType");
      
      
      
        String productDetailIDStr = request.getParameter("productDetailID"); // d√πng cho export
          System.out.println("movement type nh·∫≠n ƒëc " + movementType);
  System.out.println("detail ID nh·∫≠n ƒëc " + productDetailIDStr );
        System.out.println("üîç Serial nh·∫≠n ƒë∆∞·ª£c: [" + serial + "]");

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (serial == null || serial.trim().isEmpty() || detailIDStr == null || movementIDStr == null
                || !Validate.validateSerialFormat(serial)) {
            request.setAttribute("error", "Vui l√≤ng nh·∫≠p Serial h·ª£p l·ªá.");
            request.setAttribute("movementType", movementType);
            processRequest(request, response);
            return;
        }

        int detailID = Integer.parseInt(detailIDStr);
        int movementID = Integer.parseInt(movementIDStr);
        SerialNumberDAO serialDAO = new SerialNumberDAO();

        if ("import".equalsIgnoreCase(movementType)) {
            // ‚úÖ X·ª≠ l√Ω nh·∫≠p kho (Import): ch·ªâ ki·ªÉm tra serial ch∆∞a t·ªìn t·∫°i
            if (serialDAO.checkIfSerialExists(dbName, serial)) {
                request.setAttribute("error", "‚ùå Serial ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.");
            } else if (serialDAO.addScannedSerial(dbName, detailID, serial)) {
                request.setAttribute("success", "‚úÖ ƒê√£ th√™m Serial th√†nh c√¥ng.");
            } else {
                request.setAttribute("error", "‚ùå C√≥ l·ªói x·∫£y ra khi th√™m Serial.");
            }

        } else if ("export".equalsIgnoreCase(movementType)) {
            // ‚úÖ X·ª≠ l√Ω xu·∫•t kho (Export): ki·ªÉm tra serial trong kho & kh√¥ng b·ªã xu·∫•t tr∆∞·ªõc ƒë√≥
            if (productDetailIDStr == null) {
                request.setAttribute("error", "Thi·∫øu th√¥ng tin m√£ s·∫£n ph·∫©m.");
                processRequest(request, response);
                return;
            }

            int productDetailID = Integer.parseInt(productDetailIDStr);
System.out.println("üß™ G·ª≠i v√†o DAO: ProductDetailID = " + productDetailID + ", Serial = " + serial + ", DetailID = " + detailID);


            boolean valid = serialDAO.checkIfSerialAvailableForExport(dbName, productDetailID, serial, detailID);
            if (!valid) {
                
                request.setAttribute("error", "‚ùå Serial kh√¥ng h·ª£p l·ªá: kh√¥ng n·∫±m trong kho ho·∫∑c ƒë√£ ƒë∆∞·ª£c xu·∫•t.");
            } else if (serialDAO.markSerialAsExported(dbName, detailID, serial)) {
                System.out.println("‚û°Ô∏è ƒêang xu·∫•t serial: " + serial);
                System.out.println("‚û°Ô∏è MovementDetailID = " + movementID);
                System.out.println("‚û°Ô∏è ProductDetailID = " + productDetailID);
                request.setAttribute("success", "‚úÖ Serial ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n xu·∫•t kho.");
            } else {
                request.setAttribute("error", "‚ùå C√≥ l·ªói khi x·ª≠ l√Ω serial xu·∫•t kho.");
            }

        } else {
            // ‚ùå Tr∆∞·ªùng h·ª£p kh√¥ng r√µ lo·∫°i ƒë∆°n
            request.setAttribute("error", "Lo·∫°i y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.");
        }

        request.setAttribute("movementID", movementID);
        request.setAttribute("movementType", movementType);
        processRequest(request, response);
    }

    @Override
    public String getServletInfo() {
        return "Qu·∫£n l√Ω ki·ªÉm tra serial s·∫£n ph·∫©m khi nh·∫≠p ho·∫∑c xu·∫•t kho";
    }
}
