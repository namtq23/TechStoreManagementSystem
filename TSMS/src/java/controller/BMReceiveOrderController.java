package controller;

import dao.InventoryDAO;
import dao.SerialNumberDAO;
import dao.StockMovementDetailDAO;
import dao.StockMovementResponseDAO;
import java.io.IOException;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.util.List;
import model.StockMovementDetail;

/**
 * Controller x·ª≠ l√Ω nh·∫≠n h√†ng cho chi nh√°nh
 * @author TRIEU NAM
 */
@WebServlet("/bm-receive-order")
public class BMReceiveOrderController extends HttpServlet {
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String dbName = (String) request.getSession().getAttribute("dbName");
        Object branchIdObj = request.getSession().getAttribute("branchId");
        Object userIdObj = request.getSession().getAttribute("userId");
        String movementIDStr = request.getParameter("movementID");
        
        // Ki·ªÉm tra null tr∆∞·ªõc khi x·ª≠ l√Ω
        if (dbName == null || branchIdObj == null || userIdObj == null || movementIDStr == null) {
            System.err.println("Session kh√¥ng h·ª£p l·ªá - dbName: " + dbName + ", branchId: " + branchIdObj + 
                             ", userId: " + userIdObj + ", movementID: " + movementIDStr);
            request.getSession().setAttribute("errorMessage", "Phi√™n l√†m vi·ªác kh√¥ng h·ª£p l·ªá.");
            response.sendRedirect("bm-incoming-orders");
            return;
        }
        
        // X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ID an to√†n
        Integer branchId = null;
        Integer userId = null;
        
        try {
            // Chuy·ªÉn ƒë·ªïi branchId
            if (branchIdObj instanceof String) {
                String branchIdStr = (String) branchIdObj;
                if (branchIdStr.trim().isEmpty()) {
                    throw new IllegalArgumentException("branchId kh√¥ng ƒë∆∞·ª£c r·ªóng");
                }
                branchId = Integer.parseInt(branchIdStr.trim());
            } else if (branchIdObj instanceof Integer) {
                branchId = (Integer) branchIdObj;
            } else {
                throw new IllegalArgumentException("branchId ph·∫£i l√† String ho·∫∑c Integer");
            }
            
            // Chuy·ªÉn ƒë·ªïi userId
            if (userIdObj instanceof String) {
                String userIdStr = (String) userIdObj;
                if (userIdStr.trim().isEmpty()) {
                    throw new IllegalArgumentException("userId kh√¥ng ƒë∆∞·ª£c r·ªóng");
                }
                userId = Integer.parseInt(userIdStr.trim());
            } else if (userIdObj instanceof Integer) {
                userId = (Integer) userIdObj;
            } else {
                throw new IllegalArgumentException("userId ph·∫£i l√† String ho·∫∑c Integer");
            }
            
            // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá
            if (branchId <= 0) {
                throw new IllegalArgumentException("branchId ph·∫£i l√† s·ªë d∆∞∆°ng");
            }
            if (userId <= 0) {
                throw new IllegalArgumentException("userId ph·∫£i l√† s·ªë d∆∞∆°ng");
            }
            
            int movementID = Integer.parseInt(movementIDStr.trim());
            if (movementID <= 0) {
                throw new IllegalArgumentException("movementID ph·∫£i l√† s·ªë d∆∞∆°ng");
            }
            
            System.out.println("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω nh·∫≠n h√†ng - MovementID: " + movementID + 
                             ", BranchID: " + branchId + ", UserID: " + userId);
            
            // X·ª≠ l√Ω nh·∫≠n h√†ng
            boolean success = processReceiveOrder(dbName, movementID, branchId, userId);
            
            if (success) {
                request.getSession().setAttribute("successMessage", "ƒê√£ x√°c nh·∫≠n nh·∫≠n h√†ng th√†nh c√¥ng!");
                System.out.println("‚úÖ Nh·∫≠n h√†ng th√†nh c√¥ng cho ƒë∆°n #" + movementID);
            } else {
                request.getSession().setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n nh·∫≠n h√†ng.");
                System.err.println("‚ùå Nh·∫≠n h√†ng th·∫•t b·∫°i cho ƒë∆°n #" + movementID);
            }
            
        } catch (NumberFormatException e) {
            System.err.println("L·ªói format ID: " + e.getMessage());
            request.getSession().setAttribute("errorMessage", "ID kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng s·ªë");
        } catch (IllegalArgumentException e) {
            System.err.println("L·ªói ID: " + e.getMessage());
            request.getSession().setAttribute("errorMessage", "ID kh√¥ng h·ª£p l·ªá");
        } catch (Exception e) {
            System.err.println("L·ªói kh√¥ng x√°c ƒë·ªãnh: " + e.getMessage());
            e.printStackTrace();
            request.getSession().setAttribute("errorMessage", "C√≥ l·ªói x·∫£y ra: " + e.getMessage());
        }
        
        response.sendRedirect("bm-incoming-orders");
    }
    
    private boolean processReceiveOrder(String dbName, int movementID, int branchId, int userId) {
        try {
            StockMovementDetailDAO detailDAO = new StockMovementDetailDAO();
            InventoryDAO inventoryDAO = new InventoryDAO();
            SerialNumberDAO serialDAO = new SerialNumberDAO();
            StockMovementResponseDAO responseDAO = new StockMovementResponseDAO();
            
            System.out.println("üîç L·∫•y chi ti·∫øt ƒë∆°n h√†ng #" + movementID);
            
            // 1. L·∫•y chi ti·∫øt ƒë∆°n h√†ng
            List<StockMovementDetail> details = detailDAO.getRawDetailsByMovementID(dbName, movementID);
            
            if (details == null || details.isEmpty()) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng #" + movementID);
                return false;
            }
            
            System.out.println("üì¶ T√¨m th·∫•y " + details.size() + " s·∫£n ph·∫©m trong ƒë∆°n #" + movementID);
            
            // 2. L·∫•y InventoryID t·ª´ BranchID
            int inventoryId = inventoryDAO.getInventoryIdByBranchId(dbName, branchId);
            if (inventoryId == 0) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y inventory cho chi nh√°nh #" + branchId);
                return false;
            }
            
            System.out.println("üè™ InventoryID c·ªßa chi nh√°nh " + branchId + " l√†: " + inventoryId);
            
            // 3. X·ª≠ l√Ω t·ª´ng s·∫£n ph·∫©m
            for (StockMovementDetail detail : details) {
                System.out.println("üîÑ X·ª≠ l√Ω s·∫£n ph·∫©m: DetailID=" + detail.getDetailID() + 
                                 ", ProductDetailID=" + detail.getProductDetailID() + 
                                 ", Quantity=" + detail.getQuantity());
                
                // Th√™m/c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng trong InventoryProducts
                boolean inventoryUpdated = inventoryDAO.addOrUpdateInventoryProduct(
                    dbName, inventoryId, detail.getProductDetailID(), detail.getQuantity());
                
                if (!inventoryUpdated) {
                    System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t inventory cho s·∫£n ph·∫©m " + detail.getProductDetailID());
                    return false;
                }
                
                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t inventory: +" + detail.getQuantity() + " s·∫£n ph·∫©m " + detail.getProductDetailID());
                
                // C·∫≠p nh·∫≠t serial: g√°n v·ªÅ chi nh√°nh, x√≥a MovementDetailID
                boolean serialUpdated = serialDAO.markSerialsAsReceivedByBranch(
                    dbName, detail.getDetailID(), branchId);
                
                if (!serialUpdated) {
                    System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t serial cho DetailID " + detail.getDetailID());
                    return false;
                }
                
                System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t serial cho DetailID=" + detail.getDetailID());
            }
            
            // 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i response th√†nh "completed"
            boolean responseUpdated = responseDAO.insertCompletedResponse(dbName, movementID, userId);
            
            if (!responseUpdated) {
                System.err.println("‚ùå L·ªói c·∫≠p nh·∫≠t response status");
                return false;
            }
            
            System.out.println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n #" + movementID + " th√†nh completed");
            System.out.println("üéâ Ho√†n t·∫•t nh·∫≠n h√†ng cho ƒë∆°n #" + movementID);
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói trong processReceiveOrder: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
    
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Redirect GET requests to the orders page
        response.sendRedirect("bm-incoming-orders");
    }
    
    @Override
    public String getServletInfo() {
        return "Controller x·ª≠ l√Ω nh·∫≠n h√†ng cho chi nh√°nh";
    }
}
